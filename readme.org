* default settings
- datasets_dir: for relative dataset path
  utils.__init__.py/get_user_config_dir() setting datasets_dir: ~/.config/Ultralytics-compare/settings.yaml

* todo list
** DONE yolov6, damo-yolo, pp-yolo postprocess slowly
CLOSED: [2023-08-16 三 18:30]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-08-16 三 18:30]
- State "TODO"       from              [2023-08-16 三 12:07]
:END:

when conf=0.001, it can't filter out bboxes in predictions in yolov6, pp-yolo, damo-yolo

if set conf=0.25 it will be fast. Because yolov8 has more sharp confidence distribution. see branch statics-prediction.

** DONE docker support tensorRT>8.4 and onnxruntime-gpu 
CLOSED: [2023-08-17 四 10:59]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-08-17 四 10:59]
- State "TODO"       from              [2023-08-16 三 18:57]
:END:
docker based on pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
pip install tensorrt==8.5.1.7
see ./docker/Dockerfile-local


** DONE support predict, support ppyoloe-objects365
CLOSED: [2023-08-21 一 14:02]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-08-21 一 14:02]
- State "TODO"       from              [2023-08-16 三 18:58]
:END:

** DONE rtdetr onnx model error: ('im_shape',)
CLOSED: [2023-08-17 四 02:33]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-08-17 四 02:33]
- State "TODO"       from              [2023-08-16 三 22:25]
:END:

** DONE speed of bmodel is too long than the results of bmrt_test
CLOSED: [2023-06-02 五 14:42]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-06-02 五 14:42]
- State "TODO"       from              [2023-05-09 二 19:21]
:END:
io between host and device is bottle-neck.
*** profile
#+begin_example
bmodel infer cost: 5.4836273193359375e-06, 0.01086878776550293, 5.4836273193359375e-06
bmodel infer cost_global: 1.2636184692382812e-05, 0.010911703109741211(=sum(bmodel_infer_cost))
from_numpy: 0.00086212158203125
profile dt: 0.011846065521240234
#+end_example
so python test is 10.8ms, torch.from_numpy is expensive(0.8ms)

bmrt_test: 4~5ms
*** test using sophon example
#+begin_src json
    {
        "info": {
            "model": "yolov7-tiny",
            "height": 640,
            "width": 640,
            "output_num": 1,
            "precision": "int8mixfp16",
            "batch": 1
        },
        "speed": {
            "load input time(s)": 0.001133,
            "calculate  time(s)": 0.004363,
            "get output time(s)": 0.00697,
            "compare    time(s)": 0.002589
        }
    }
#+end_src
** TODO compare end2end 
:LOGBOOK:
- State "TODO"       from              [2023-08-22 二 18:44]
:END:

* autobackend

| yolov8   | .pt | .engine | .onnx | .bmodel |
| yolov5   |     | .engine | .onnx | .bmodel |
| yolov6   |     | .engine | .onnx | .bmodel |
| yolov7   |     | .engine | .onnx | .bmodel |
| ppyolo   |     | .engine | .onnx |         |
| rtdetr   |     | .engine | .onnx |         |
| damoyolo |     | .engine | .onnx |         |

* conclusion
- 支持多个模型、多个后台的统一比较, 结果更加公平。
- 测试流程简单，可脚本自动化
- 交互式结果对比展示
- 方便添加新的模型、后台的支持
- 量化能有效提高模型性能
- 不同的硬件结果不同
- yolov6 小模型 PTQ 精度损失明显, 需要 QAT
- rt-detr no need NMS(0.7ms-1ms)

* paddle model
NOTE: if don't set args.is_pp and args.infer_config, onnx model must start with "paddle", and using the default infer_config path
~args.infer_config = Path(self.model).parent / "paddle_infer_config" / Path(self.model).with_suffix(".yml").name~

** pp-yolo
*** box
return: xyxy in native space

** rt-detr
*** need tensorrt >= 8.5.1

* speed
** tensorRT
*** onnx2trt
 detection_deploy/TRT/onnx_to_trt_script.py
*** get speed 
#+begin_src bash
  cd trt_tools
  python eval_tensorrt_speed.py
  python parser_tensorrt_speed.py
#+end_src
* precision
** engine fp16, int8
#+begin_src bash
  cd examples
  python val_scripts.py --model_dir ./weights_test_engine 
#+end_src
** onnx
#+begin_src bash
  cd examples
  python val_scripts.py --model_dir ./weights_test_onnx
#+end_src

* steps
1. get onnx & change name format
2. export to .engine model \\
   [[*onnx2trt][onnx2trt]]
3. eval .engine model
   [[*eval][eval]]
4. eval trtexec speed
5. eval mAP
  
* model graph

** yolov5
#+caption: yolov5 graph
#+attr_html: :width 800
[[file:ultralytics/assets/yolov5_mmyolo.jpg]]

#+caption: yolov5 p6 graph
#+attr_html: :width 800
[[file:ultralytics/assets/yolov5_p6_mmyolo.jpg]]

** yolov6
#+caption: yolov6 graph
#+attr_html: :width 800
[[file:ultralytics/assets/yolov6l_mmyolo.png]]

** yolov7
#+caption: yolov7 graph
#+attr_html: :width 800
[[file:ultralytics/assets/yolov7l_mmyolo.png]]

** yolov8
#+caption: yolov8 graph
#+attr_html: :width 800
[[file:ultralytics/assets/yolov8_mmyolo.jpg]]

** yolov5 vs yolov5u vs yolov8
#+caption: v5 v5u v8 configure
#+attr_html: :width 1200
[[file:ultralytics/assets/yolov5_vs_5u_vs_8.png]]

#+caption: c3 vs c2f
#+attr_html: :width 300
|[[file:ultralytics/assets/C3_n1.png]]|[[file:ultralytics/assets/c2f_n1.png]]|

* predict distribution

#+caption: yolov5,7,8 have sharp peak at 0 point, ppyoloe,damoyolo,yolov6 do not have peak at 0 point. It causes PostProcess costs too much when setting conf=0.001.
#+attr_html: :width 800
[[file:ultralytics/assets/predict_disctibution_0.png]]

#+caption: {yolov7}, {yolov5, 8}, {yolov6, ppyolo, damoyolo} form 3 groups. yolov8 group's distributions grow up after conf > 0.9.
#+attr_html: :width 800
[[file:ultralytics/assets/predict_disctibution_1.png]]

* eval
** start docker 
#+begin_src bash
  cd docker
  ./start_docker.sh
#+end_src
** link datasets
#+begin_src bash
  cd examples/datasets
  ln -s /home/liuyang/datasets/coco coco
#+end_src

* train
** multi_dataset
see ~./ultralytics/cfg/datasets/multi_sod4birdsTrain-coco.yaml~
- support multiple datasets
- can set ratio of each datasets
- support mapping to new labels 
* issue
** ppyolo predict transforms is None [001]
setup_source override transforms.
** override not defined [002]
using args directly
** val error: AttributeError: 'DetectionValidator' object has no attribute 'model' [003]
validator add attribute model.
** export error: ValueError: too many values to unpack (expected 12) [004]
add sophon
** train error: valid step error[005]
** replace args not working [006]
update engine/model.py:val
** yolov8.om 3output return wrong bboxes[007]
* default configurations
~ultralytics/cfg/default.yaml~

default args
#+begin_src yaml
# Ultralytics YOLO 🚀, AGPL-3.0 license
# Default training settings and hyperparameters for medium-augmentation COCO training

task: detect  # (str) YOLO task, i.e. detect, segment, classify, pose
mode: train  # (str) YOLO mode, i.e. train, val, predict, export, track, benchmark

# Train settings -------------------------------------------------------------------------------------------------------
model:  # (str, optional) path to model file, i.e. yolov8n.pt, yolov8n.yaml
data:  # (str, optional) path to data file, i.e. coco128.yaml
epochs: 100  # (int) number of epochs to train for
patience: 50  # (int) epochs to wait for no observable improvement for early stopping of training
batch: 16  # (int) number of images per batch (-1 for AutoBatch)
imgsz: 640  # (int | list) input images size as int for train and val modes, or list[w,h] for predict and export modes
save: True  # (bool) save train checkpoints and predict results
save_period: -1 # (int) Save checkpoint every x epochs (disabled if < 1)
cache: False  # (bool) True/ram, disk or False. Use cache for data loading
device:  # (int | str | list, optional) device to run on, i.e. cuda device=0 or device=0,1,2,3 or device=cpu
workers: 8  # (int) number of worker threads for data loading (per RANK if DDP)
project:  # (str, optional) project name
name:  # (str, optional) experiment name, results saved to 'project/name' directory
exist_ok: False  # (bool) whether to overwrite existing experiment
pretrained: True  # (bool | str) whether to use a pretrained model (bool) or a model to load weights from (str)
optimizer: auto  # (str) optimizer to use, choices=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
verbose: True  # (bool) whether to print verbose output
seed: 0  # (int) random seed for reproducibility
deterministic: True  # (bool) whether to enable deterministic mode
single_cls: False  # (bool) train multi-class data as single-class
rect: False  # (bool) rectangular training if mode='train' or rectangular validation if mode='val'
cos_lr: False  # (bool) use cosine learning rate scheduler
close_mosaic: 10  # (int) disable mosaic augmentation for final epochs (0 to disable)
resume: False  # (bool) resume training from last checkpoint
amp: True  # (bool) Automatic Mixed Precision (AMP) training, choices=[True, False], True runs AMP check
fraction: 1.0  # (float) dataset fraction to train on (default is 1.0, all images in train set)
profile: False  # (bool) profile ONNX and TensorRT speeds during training for loggers
freeze: None  # (int | list, optional) freeze first n layers, or freeze list of layer indices during training
# Segmentation
overlap_mask: True  # (bool) masks should overlap during training (segment train only)
mask_ratio: 4  # (int) mask downsample ratio (segment train only)
# Classification
dropout: 0.0  # (float) use dropout regularization (classify train only)

# Val/Test settings ----------------------------------------------------------------------------------------------------
val: True  # (bool) validate/test during training
split: val  # (str) dataset split to use for validation, i.e. 'val', 'test' or 'train'
save_json: False  # (bool) save results to JSON file
save_hybrid: False  # (bool) save hybrid version of labels (labels + additional predictions)
conf:  # (float, optional) object confidence threshold for detection (default 0.25 predict, 0.001 val)
iou: 0.7  # (float) intersection over union (IoU) threshold for NMS
max_det: 300  # (int) maximum number of detections per image
half: False  # (bool) use half precision (FP16)
dnn: False  # (bool) use OpenCV DNN for ONNX inference
plots: True  # (bool) save plots during train/val

# Prediction settings --------------------------------------------------------------------------------------------------
source:  # (str, optional) source directory for images or videos
show: False  # (bool) show results if possible
save_txt: False  # (bool) save results as .txt file
save_conf: False  # (bool) save results with confidence scores
save_crop: False  # (bool) save cropped images with results
show_labels: True  # (bool) show object labels in plots
show_conf: True  # (bool) show object confidence scores in plots
vid_stride: 1  # (int) video frame-rate stride
stream_buffer: False  # (bool) buffer all streaming frames (True) or return the most recent frame (False)
line_width:   # (int, optional) line width of the bounding boxes, auto if missing
visualize: False  # (bool) visualize model features
augment: False  # (bool) apply image augmentation to prediction sources
agnostic_nms: False  # (bool) class-agnostic NMS
classes:  # (int | list[int], optional) filter results by class, i.e. classes=0, or classes=[0,2,3]
retina_masks: False  # (bool) use high-resolution segmentation masks
boxes: True  # (bool) Show boxes in segmentation predictions

# Export settings ------------------------------------------------------------------------------------------------------
format: torchscript  # (str) format to export to, choices at https://docs.ultralytics.com/modes/export/#export-formats
keras: False  # (bool) use Kera=s
optimize: False  # (bool) TorchScript: optimize for mobile
int8: False  # (bool) CoreML/TF INT8 quantization
dynamic: False  # (bool) ONNX/TF/TensorRT: dynamic axes
simplify: False  # (bool) ONNX: simplify model
opset:  # (int, optional) ONNX: opset version
workspace: 4  # (int) TensorRT: workspace size (GB)
nms: False  # (bool) CoreML: add NMS

# Hyperparameters ------------------------------------------------------------------------------------------------------
lr0: 0.01  # (float) initial learning rate (i.e. SGD=1E-2, Adam=1E-3)
lrf: 0.01  # (float) final learning rate (lr0 * lrf)
momentum: 0.937  # (float) SGD momentum/Adam beta1
weight_decay: 0.0005  # (float) optimizer weight decay 5e-4
warmup_epochs: 3.0  # (float) warmup epochs (fractions ok)
warmup_momentum: 0.8  # (float) warmup initial momentum
warmup_bias_lr: 0.1  # (float) warmup initial bias lr
box: 7.5  # (float) box loss gain
cls: 0.5  # (float) cls loss gain (scale with pixels)
dfl: 1.5  # (float) dfl loss gain
pose: 12.0  # (float) pose loss gain
kobj: 1.0  # (float) keypoint obj loss gain
label_smoothing: 0.0  # (float) label smoothing (fraction)
nbs: 64  # (int) nominal batch size
hsv_h: 0.015  # (float) image HSV-Hue augmentation (fraction)
hsv_s: 0.7  # (float) image HSV-Saturation augmentation (fraction)
hsv_v: 0.4  # (float) image HSV-Value augmentation (fraction)
degrees: 0.0  # (float) image rotation (+/- deg)
translate: 0.1  # (float) image translation (+/- fraction)
scale: 0.5  # (float) image scale (+/- gain)
shear: 0.0  # (float) image shear (+/- deg)
perspective: 0.0  # (float) image perspective (+/- fraction), range 0-0.001
flipud: 0.0  # (float) image flip up-down (probability)
fliplr: 0.5  # (float) image flip left-right (probability)
mosaic: 1.0  # (float) image mosaic (probability)
mixup: 0.0  # (float) image mixup (probability)
copy_paste: 0.0  # (float) segment copy-paste (probability)

# Custom config.yaml ---------------------------------------------------------------------------------------------------
cfg:  # (str, optional) for overriding defaults.yaml

# Tracker settings ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml  # (str) tracker type, choices=[botsort.yaml, bytetrack.yaml]

# for paddlepaddle
infer_config: None

#
replace: False

#+end_src

* hisi om model

